#!/usr/bin/env ruby
require 'blocklist'
bl = Blocklist.new
bl.parse(File.read('/etc/hosts'))

def help(msg=nil)
  if msg
    $stderr.puts(msg)
    $stderr.puts('')
  end
  $stderr.puts <<-STR
Syntax: #{$0} <command> <block name> [options]
  block name: name of a block in /etc/hosts

Commands:
  #{$0} add <block name> [domain1] .. [domainN]
    Add a number of domains to the specified block.
    Each domain will automatically be added with the www subdomain and without subdomain.
    Duplicate domains are skipped.
  #{$0} add -d <block name> [domain1] .. [domainN]
    Perform a dry-run. Does not modify /etc/hosts
  #{$0} list
    Shows a list of all blocks currently defined
  STR
  exit 1
end

command = ARGV.shift

case command
when 'list'
  puts bl.blocks.map {|block| block.name}.join("\n")
when 'add'
  dry_run = ARGV.delete('-d')
  block_name = ARGV.shift
  block = bl.block(block_name) || Blocklist::Block.new(block_name)
  
  domains = block.lines.map {|line| line.domains}.flatten
  saved_domains = ARGV.map do |domain|
    dom_segments = domain.split(".")
    tld_size = 1
    tld_size = 2 if %w[uk].include? dom_segments.last
    tld = dom_segments[-tld_size..-1].join(".")
    dom_no_tld = dom_segments[0...-tld_size]
    domain_base = dom_no_tld.last
    subdomain = dom_no_tld.size == 1 ? nil : dom_no_tld[0...-1].join(".")
    new_domains = [nil, 'www', subdomain].uniq.map {|sub| [sub, domain_base, tld].compact.join(".")} - domains
    if new_domains.size > 0
      block.lines << Blocklist::Line.new('127.0.0.1', *new_domains)
      domains.concat(new_domains)
    end
    new_domains
  end
  puts bl
  if !dry_run and saved_domains.flatten.size > 0
    File.open('/etc/hosts','w') {|f| f.puts(bl.to_s)}
  end
else
  help "Command unknown: '#{command}'"
end
